#!/bin/bash
#
# lib/OS10-FE-Networking
# # Functions to control the configuration and operation of the **OS10 FE Networking**

# Dependencies:
# (none)

# Save trace setting
_XTRACE_OS10_FE_NETWORKING=$(set +o | grep xtrace)

# Defaults
# --------

# os10-fe-networking service
OS10_FE_NETWORKING_REPO=${OS10_FE_NETWORKING_REPO:-${GIT_BASE}/Dell-EMC-Cloud/OS10-FE-Networking.git}
OS10_FE_NETWORKING_BRANCH=${OS10_FE_NETWORKING_BRANCH:-main}

OS10_FE_NETWORKING_DIR=${OS10_FE_NETWORKING_DIR:-$DEST/OS10-FE-Networking}
OS10_FE_NETWORKING_BRANCH_DATA_DIR=""$DATA_DIR/OS10-FE-Networking""

# Support entry points installation of console scripts
OS10_FE_NETWORKING_BIN_DIR=$(get_python_exec_prefix)

OS10_FE_CONF_DIR=${OS10_FE_CONF_DIR:-/etc/neutron/plugins/os10_fe}
POWERSCALE_SCRIPTS_DIR=${POWERSCALE_SCRIPTS_DIR:-powerscale-scripts}
POWERSCALE_INVENTORY_DIR=${POWERSCALE_INVENTORY_DIR:-$DATA_DIR/ironic/inventory}
Q_POWERSCALE_ENROLL_MODE=${Q_POWERSCALE_ENROLL_MODE:-port-channel}

# Functions
# ---------

function install_os10_fe_networking {
    setup_develop $OS10_FE_NETWORKING_DIR
}

function get_os10_fe_network_config_files {
    local file=$1
    local matchgroup=$2

    for configfile in $(get_meta_section_files $file $matchgroup); do
        if [ -z $(eval "echo $configfile | grep $OS10_FE_CONF_DIR") ]; then
            continue
        fi
		echo $(eval "echo $configfile")
    done

}

function configure_os10_fe_networking {
    sudo install -d -o $STACK_USER $OS10_FE_CONF_DIR

    (cd $OS10_FE_NETWORKING_DIR && exec oslo-config-generator --config-file ./tools/config/os10-fe-networking-config-generator.conf)

    for config_file in $(get_os10_fe_network_config_files $TOP_DIR/local.conf post-config); do
        cp $OS10_FE_NETWORKING_DIR/os10_fe.conf.sample $config_file
    done

    NEUTRON_CORE_PLUGIN='os10_ml2'
    iniset $NEUTRON_CONF DEFAULT core_plugin $NEUTRON_CORE_PLUGIN
}

function configure_os10_fe_networking_neutron_agent {
    configure_keystone_authtoken_middleware $NEUTRON_CONF ironic ironic
    configure_placement_nova_compute $NEUTRON_CONF
}

function start_os10_fe_networking_neutron_agent {
    for config_file in $(get_os10_fe_network_config_files $TOP_DIR/local.conf post-config); do
        tag=$(basename $config_file | $CONFIG_AWK_CMD -F"." '{print $1}')
        service="os10-neutronagt-"$tag
        run_process $service "$OS10_FE_NETWORKING_BIN_DIR/os10-fe-neutron-agent --config-file $NEUTRON_CONF --config-file $NEUTRON_CORE_PLUGIN_CONF --config-file $config_file"
    done
}

function create_os10_fe_networks {
    (cd $TOP_DIR/$POWERSCALE_SCRIPTS_DIR && ./prov-net.sh create && ./mgmt-net.sh create)
}

function delete_os10_fe_networks {
    (cd $TOP_DIR/$POWERSCALE_SCRIPTS_DIR && ./prov-net.sh delete && ./mgmt-net.sh delete)
}

function create_baremetal_inventory {
    sudo install -d -o $STACK_USER $POWERSCALE_INVENTORY_DIR
    (cp $TOP_DIR/$POWERSCALE_SCRIPTS_DIR/inventory/* $POWERSCALE_INVENTORY_DIR)
}

function manage_baremetal_nodes {
    local op=$1

    enroll_script=port-channel-enroll.sh
    enroll_script=onefs-node-enroll.sh
    [[ "port-channel" == "$Q_POWERSCALE_ENROLL_MODE" ]] && enroll_script=port-channel-enroll.sh

    cd $POWERSCALE_INVENTORY_DIR || return
    for node in *; do
        [[ -e "$node" ]] || break
        service_tag=$(echo "$node" | $CONFIG_AWK_CMD -F"." '{print $1}')
        (cd $TOP_DIR/$POWERSCALE_SCRIPTS_DIR && ./$enroll_script $op $service_tag)
        cd $POWERSCALE_INVENTORY_DIR || return
    done
}

function stop_os10_fe_networking_neutron_agent {
    for config_file in $(get_os10_fe_network_config_files $TOP_DIR/local.conf post-config); do
        tag=$(basename $config_file | $CONFIG_AWK_CMD -F"." '{print $1}')
        service="os10-neutronagt-"$tag
        stop_process $service
    done
}

function cleanup_os10_fe_networking {
    rm -rf $OS10_FE_NETWORKING_BRANCH_DATA_DIR
}
